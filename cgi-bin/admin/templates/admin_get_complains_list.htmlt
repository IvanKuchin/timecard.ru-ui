<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <<template:templates/admin_header.htmlt>>
</head>
 
<body>
<table width="100%" height="255" border="0" cellspacing="5">
  <tr> 
    <td colspan="2" bgcolor="#FE8738"><div align="center"><strong><font color=white><br>(Список жалоб на книги)</font></strong></div></td>
  </tr>
  <tr valign=top  bgcolor="EFF8FF"> 
    <<template:templates/admin_menu.htmlt>>
    <td width="76%">

<div class="container-fluid">
  <div class="row">
    <div class="col-xs-2">
    </div>
    <div class="col-xs-8">
      <div id="complain_list_count">Number of complains: </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <br>
    </div>
  </div>
</div>
<div class="container-fluid" id="complain_list">
</div>

<script type="text/javascript">

  var PopoverUserID = function()
  {
    var   currTag = $(this);

    $.getJSON('/cgi-bin/admin/admin.cgi?act=AJAX_getUserByID', {userID: currTag.data("userID")})
      .done(function(data) {
        if(data.result == "success")
        {
          if(data.users.length)
            system_calls.PopoverInfo(currTag.attr("id"), data.users[0].name + " " + data.users[0].nameLast);
          else
            system_calls.PopoverInfo(currTag.attr("id"), "not found");
            
        }
        else
        {
          console.debug("PopoverUserID: done handler: ERROR:" + data.description);
        }


      })
      .fail(function(data) {
        console.debug("PopoverUserID: error handler");
      });
  }

  var ComplainChangeState = function()
  {
    var   currTag = $(this);

    $.getJSON('/cgi-bin/admin/admin.cgi?act=AJAX_setComplainState', {complainID: currTag.data("complainID"), state: currTag.val(), rand: Math.round(Math.random() * 100000000)})
      .done(function(data) {
        if(data.result == "success")
        {

        }
        else
        {
          console.debug("ComplainChangeState: done handler: ERROR:" + data.description);
        }


      })
      .fail(function(data) {
        console.debug("ComplainChangeState: error handler")
      });
  }

  var ComplainsUpdateResolveComment = function()
  {
    var   currTag = $(this);

    $.getJSON('/cgi-bin/admin/admin.cgi?act=AJAX_setComplainResolveComment', {complainID: currTag.data("complainID"), resolveComment: currTag.val()})
      .done(function(data) {
        if(data.result == "success")
        {

        }
        else
        {
          console.debug("ComplainsUpdateResolveComment: done handler: ERROR:" + data.description);
        }


      })
      .fail(function(data) {
        console.debug("ComplainsUpdateResolveComment: error handler")
      });
  }

  var RenderComplainsList = function()
  {
      $.getJSON('/cgi-bin/admin/admin.cgi?act=AJAX_getComplainsList', {rand: Math.round(Math.random() * 100000000)})
      .done(function(data) {
        $("#complain_list_count").append(data.complains.length);
        data.complains.forEach(function(item, i, arr)
          {
            var   buttonRemoveComplainCover = $("<button>").addClass("btn btn-danger")
                                                        .append("Del")
                                                        .data("complainID", item.id)
                                                        .on("click", function(e)
                                                          {
                                                              var   complainID = $(this).data("complainID");
                                                              // $(this).parent().parent().remove();
                                                              $("img#coverComplainID" + complainID).attr("src", "/images/pages/common/empty.png");

                                                              $.getJSON('/cgi-bin/admin/admin.cgi?act=AJAX_removeComplainCover', {complainID: complainID})

                                                          });
            var   divRow1 = $("<div>").addClass("row");

            var   divColComplainID = $("<div>").addClass("col-xs-1");
            var   divColType = $("<div>").addClass("col-xs-2");
            var   divColComplain = $("<div>").addClass("col-xs-7");
            var   divColOpenTimestamp = $("<div>").addClass("col-xs-2");

            var   divRow2 = $("<div>").addClass("row");

            var   divColState = $("<div>").addClass("col-xs-1 col-xs-offset-3");

            var   divRow3 = $("<div>").addClass("row");

            var   divColResolveComment = $("<div>").addClass("col-xs-offset-3 col-xs-7");
            var   divColCloseTimestamp = $("<div>").addClass("col-xs-2");

            var   divRow4 = $("<div>").addClass("row");

            var   divColButton1 = $("<div>").addClass("col-xs-1");
            var   complainComment = $("<span>").append(item.complainComment) 
                                        .data("name", "complainComment")
                                        .data("value", item.complainComment)
                                        .attr("id", "complainID" + item.id + "title");
            var   stateNew = $("<input>").attr("type", "radio")
                                        .data("complainID", item.id)
                                        .attr("name", "state" + item.id)
                                        .attr("id", "state" + item.id + "new")
                                        .attr("value", "new")
                                        .on("click", ComplainChangeState);
            var   labelNew = $("<label>").attr("for", "state" + item.id + "new")
                                        .addClass("font_weight_normal")
                                        .append(" new");
            var   stateHandling = $("<input>").attr("type", "radio")
                                        .data("complainID", item.id)
                                        .attr("name", "state" + item.id)
                                        .attr("id", "state" + item.id + "handling")
                                        .attr("value", "handling")
                                        .on("click", ComplainChangeState);
            var   labelHandling = $("<label>").attr("for", "state" + item.id + "handling")
                                        .addClass("font_weight_normal")
                                        .append(" handle");
            var   stateClosed = $("<input>").attr("type", "radio")
                                        .data("complainID", item.id)
                                        .attr("name", "state" + item.id)
                                        .attr("id", "state" + item.id + "closed")
                                        .attr("value", "closed")
                                        .on("click", ComplainChangeState);
            var   labelClosed = $("<label>").attr("for", "state" + item.id + "closed")
                                        .addClass("font_weight_normal")
                                        .append(" closed");
            var   complainedUserID = $("<span>").append("userID " + item.userID)
                                        .addClass("looks_like_link")
                                        .attr("id", "complainID" + item.id + "userID")
                                        .data("userID", item.userID)
                                        .on("click", PopoverUserID);
            var   complain = $("<textarea>").val(item.complain)
                                        .addClass("width_100percent")
                                        .attr("disabled", "");
            var   resolveComment = $("<textarea>").val(system_calls.ConvertHTMLToText(item.resolveComment))
                                        .addClass("width_100percent")
                                        .data("complainID", item.id)
                                        .on("change", ComplainsUpdateResolveComment);
            var   openEventTimestamp = system_calls.GetLocalizedDateFromSeconds(item.openEventTimestamp);
            var   closeEventTimestamp = system_calls.GetLocalizedDateFromSeconds(item.closeEventTimestamp);


            if(item.state == "new") stateNew.attr("checked", "");
            if(item.state == "handling") stateHandling.attr("checked", "");
            if(item.state == "closed") stateClosed.attr("checked", "");

            divRow1.append(divColComplainID.append(item.id))
                    .append(divColType.append(item.type).append(item.entityID + "/").append(item.subtype))
                    .append(divColComplain.append(complainedUserID).append(" complained<br>").append(complain))
                    .append(divColOpenTimestamp.append(openEventTimestamp))
                    .appendTo($("#complain_list"));
            divRow2.append(divColState.append(stateNew).append(" ").append(labelNew).append("<br>")
                                      .append(stateHandling).append(" ").append(labelHandling).append("<br>")
                                      .append(stateClosed).append(" ").append(labelClosed).append("<br>")
                            )
                    .appendTo($("#complain_list"));
            divRow3.append(divColResolveComment.append(resolveComment))
                    .append(divColCloseTimestamp.append(closeEventTimestamp))
                    .appendTo($("#complain_list"));
            divRow4.append("<hr>")
                    .appendTo($("#complain_list"));
          });
      });

  }

  $(document).ready(function() 
  {
      $.ajaxSetup({ cache: false });
      RenderComplainsList();
  });

</script>

	  </td>
  </tr>
</table>
</body>
</html>
